/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_wasmoutput_free(a: number): void;
export function wasmoutput_js(a: number, b: number): void;
export function wasmoutput_cst(a: number, b: number): void;
export function wasmoutput_ast(a: number, b: number): void;
export function wasmoutput_errors(a: number, b: number): void;
export function init(): void;
export function run_compiler(a: number, b: number): number;
export function ts_parser_parse(a: number, b: number, c: number, d: number, e: number): number;
export function ts_node_start_point(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_node_end_point(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_language_version(a: number): number;
export function ts_language_symbol_count(a: number): number;
export function ts_language_symbol_name(a: number, b: number): number;
export function ts_language_symbol_for_name(a: number, b: number, c: number, d: number): number;
export function ts_language_symbol_type(a: number, b: number): number;
export function ts_language_field_count(a: number): number;
export function ts_language_field_name_for_id(a: number, b: number): number;
export function ts_parser_new(): number;
export function ts_parser_set_language(a: number, b: number): number;
export function ts_parser_language(a: number): number;
export function ts_parser_logger(a: number, b: number): void;
export function ts_parser_set_logger(a: number, b: number, c: number): void;
export function ts_parser_reset(a: number): void;
export function ts_parser_timeout_micros(a: number): number;
export function ts_parser_set_timeout_micros(a: number, b: number): void;
export function ts_parser_set_included_ranges(a: number, b: number, c: number): number;
export function ts_parser_cancellation_flag(a: number): number;
export function ts_parser_set_cancellation_flag(a: number, b: number): void;
export function ts_parser_delete(a: number): void;
export function ts_tree_root_node(a: number, b: number): void;
export function ts_tree_root_node_with_offset(a: number, b: number, c: number, d: number, e: number): void;
export function ts_tree_language(a: number): number;
export function ts_tree_edit(a: number, b: number): void;
export function ts_tree_cursor_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_tree_get_changed_ranges(a: number, b: number, c: number): number;
export function ts_tree_delete(a: number): void;
export function ts_tree_copy(a: number): number;
export function ts_node_symbol(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_type(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_is_named(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_is_extra(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_has_changes(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_has_error(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_is_missing(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_start_byte(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_end_byte(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_child(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function ts_node_child_count(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_named_child(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function ts_node_named_child_count(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_child_by_field_id(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function ts_node_field_name_for_child(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function ts_tree_cursor_reset(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_tree_cursor_goto_first_child(a: number): number;
export function ts_language_field_id_for_name(a: number, b: number, c: number): number;
export function ts_node_parent(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_node_next_sibling(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_node_prev_sibling(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_node_next_named_sibling(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_node_prev_named_sibling(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_node_descendant_for_byte_range(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function ts_node_named_descendant_for_byte_range(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function ts_node_descendant_for_point_range(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function ts_node_named_descendant_for_point_range(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function ts_node_string(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_edit(a: number, b: number): void;
export function ts_tree_cursor_current_node(a: number, b: number): void;
export function ts_tree_cursor_current_field_id(a: number): number;
export function ts_tree_cursor_current_field_name(a: number): number;
export function ts_tree_cursor_goto_parent(a: number): number;
export function ts_tree_cursor_goto_next_sibling(a: number): number;
export function ts_tree_cursor_goto_first_child_for_byte(a: number, b: number): number;
export function ts_tree_cursor_goto_first_child_for_point(a: number, b: number, c: number): number;
export function ts_tree_cursor_copy(a: number, b: number): void;
export function ts_tree_cursor_delete(a: number): void;
export function ts_query_new(a: number, b: number, c: number, d: number, e: number): number;
export function ts_query_string_count(a: number): number;
export function ts_query_capture_count(a: number): number;
export function ts_query_pattern_count(a: number): number;
export function ts_query_capture_name_for_id(a: number, b: number, c: number): number;
export function ts_query_capture_quantifier_for_id(a: number, b: number, c: number): number;
export function ts_query_predicates_for_pattern(a: number, b: number, c: number): number;
export function ts_query_start_byte_for_pattern(a: number, b: number): number;
export function ts_query_delete(a: number): void;
export function ts_query_disable_capture(a: number, b: number, c: number): void;
export function ts_query_disable_pattern(a: number, b: number): void;
export function ts_query_is_pattern_rooted(a: number, b: number): number;
export function ts_query_is_pattern_guaranteed_at_step(a: number, b: number): number;
export function ts_query_cursor_new(): number;
export function ts_query_cursor_match_limit(a: number): number;
export function ts_query_cursor_set_match_limit(a: number, b: number): void;
export function ts_query_cursor_did_exceed_match_limit(a: number): number;
export function ts_query_cursor_set_byte_range(a: number, b: number, c: number): void;
export function ts_query_cursor_set_point_range(a: number, b: number, c: number, d: number, e: number): void;
export function ts_query_cursor_remove_match(a: number, b: number): void;
export function ts_query_cursor_delete(a: number): void;
export function ts_query_string_value_for_id(a: number, b: number, c: number): number;
export function ts_query__step_is_fallible(a: number, b: number): number;
export function ts_query_cursor_exec(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function ts_query_cursor__compare_nodes(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): number;
export function ts_query_cursor__compare_captures(a: number, b: number, c: number, d: number, e: number): void;
export function ts_tree_cursor_parent_node(a: number, b: number): void;
export function ts_tree_cursor_current_status(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_query_cursor_next_match(a: number, b: number): number;
export function ts_query_cursor_next_capture(a: number, b: number, c: number): number;
export function ts_subtree_last_external_token(a: number, b: number, c: number): void;
export function ts_stack_pop_pending(a: number, b: number, c: number): void;
export function ts_stack_push(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function ts_subtree_release(a: number, b: number, c: number): void;
export function ts_stack_print_dot_graph(a: number, b: number, c: number): number;
export function ts_subtree_external_scanner_state_eq(a: number, b: number, c: number, d: number): number;
export function ts_subtree_compare(a: number, b: number, c: number, d: number): number;
export function ts_stack_pop_count(a: number, b: number, c: number, d: number): void;
export function ts_subtree_array_remove_trailing_extras(a: number, b: number): void;
export function ts_subtree_new_node(a: number, b: number, c: number, d: number, e: number): void;
export function ts_stack_merge(a: number, b: number, c: number): number;
export function ts_stack_pop_all(a: number, b: number, c: number): void;
export function ts_stack_renumber_version(a: number, b: number, c: number): void;
export function ts_stack_pop_error(a: number, b: number, c: number): void;
export function ts_subtree_make_mut(a: number, b: number, c: number, d: number): void;
export function ts_stack_set_last_external_token(a: number, b: number, c: number, d: number): void;
export function ts_language_table_entry(a: number, b: number, c: number, d: number): void;
export function ts_subtree_retain(a: number, b: number): void;
export function ts_lexer_start(a: number): void;
export function ts_stack_has_advanced_since_error(a: number, b: number): number;
export function ts_subtree_new_leaf(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number): void;
export function ts_subtree_new_error(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): void;
export function ts_subtree_set_symbol(a: number, b: number, c: number): void;
export function ts_stack_pause(a: number, b: number, c: number, d: number): void;
export function ts_lexer_set_included_ranges(a: number, b: number, c: number): number;
export function ts_subtree_pool_new(a: number, b: number): void;
export function ts_stack_new(a: number): number;
export function ts_stack_delete(a: number): void;
export function ts_parser_included_ranges(a: number, b: number): number;
export function ts_stack_clear(a: number): void;
export function ts_range_array_get_changed_ranges(a: number, b: number, c: number, d: number, e: number): void;
export function ts_subtree__print_dot_graph(a: number, b: number, c: number, d: number, e: number): void;
export function ts_stack_copy_version(a: number, b: number): number;
export function ts_subtree_new_missing_leaf(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function ts_stack_record_summary(a: number, b: number, c: number): void;
export function ts_subtree_balance(a: number, b: number, c: number, d: number): void;
export function ts_tree_new(a: number, b: number, c: number, d: number, e: number): number;
export function ts_parser_parse_string(a: number, b: number, c: number, d: number): number;
export function ts_parser_parse_string_encoding(a: number, b: number, c: number, d: number, e: number): number;
export function ts_language_symbol_metadata(a: number, b: number, c: number): void;
export function ts_language_public_symbol(a: number, b: number): number;
export function ts_subtree_edit(a: number, b: number, c: number, d: number, e: number): void;
export function ts_subtree_get_changed_ranges(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function ts_tree_print_dot_graph(a: number, b: number): void;
export function ts_external_scanner_state_init(a: number, b: number, c: number): void;
export function ts_external_scanner_state_copy(a: number, b: number): void;
export function ts_external_scanner_state_delete(a: number): void;
export function ts_external_scanner_state_data(a: number): number;
export function ts_external_scanner_state_eq(a: number, b: number, c: number): number;
export function ts_subtree_array_copy(a: number, b: number, c: number, d: number): void;
export function ts_subtree_array_clear(a: number, b: number): void;
export function ts_subtree_array_delete(a: number, b: number): void;
export function ts_subtree_array_reverse(a: number): void;
export function ts_subtree_pool_delete(a: number): void;
export function ts_subtree_clone(a: number, b: number, c: number): void;
export function ts_subtree_summarize_children(a: number, b: number, c: number): void;
export function ts_subtree_new_error_node(a: number, b: number, c: number, d: number): void;
export function ts_subtree_string(a: number, b: number, c: number, d: number): number;
export function ts_subtree_print_dot_graph(a: number, b: number, c: number, d: number): void;
export function ts_subtree_external_scanner_state(a: number, b: number): number;
export function ts_stack_version_count(a: number): number;
export function ts_stack_state(a: number, b: number): number;
export function ts_stack_position(a: number, b: number, c: number): void;
export function ts_stack_last_external_token(a: number, b: number, c: number): void;
export function ts_stack_error_cost(a: number, b: number): number;
export function ts_stack_node_count_since_error(a: number, b: number): number;
export function ts_stack_get_summary(a: number, b: number): number;
export function ts_stack_dynamic_precedence(a: number, b: number): number;
export function ts_stack_remove_version(a: number, b: number): void;
export function ts_stack_swap_versions(a: number, b: number, c: number): void;
export function ts_stack_can_merge(a: number, b: number, c: number): number;
export function ts_stack_halt(a: number, b: number): void;
export function ts_stack_is_active(a: number, b: number): number;
export function ts_stack_is_halted(a: number, b: number): number;
export function ts_stack_is_paused(a: number, b: number): number;
export function ts_stack_resume(a: number, b: number, c: number): void;
export function ts_range_array_intersects(a: number, b: number, c: number, d: number): number;
export function ts_tree_cursor_init(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_lexer_init(a: number): void;
export function ts_lexer_delete(a: number): void;
export function ts_lexer_set_input(a: number, b: number, c: number, d: number): void;
export function ts_lexer_reset(a: number, b: number, c: number, d: number): void;
export function ts_lexer_finish(a: number, b: number): void;
export function ts_lexer_advance_to_end(a: number): void;
export function ts_lexer_included_ranges(a: number, b: number): number;
export function ts_lexer_mark_end(a: number): void;
export function ts_node_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ts_node_eq(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): number;
export function ts_node_is_null(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function ts_node_child_by_field_name(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function ts_node_first_child_for_byte(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function ts_node_first_named_child_for_byte(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_start(): void;
